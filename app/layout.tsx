import SidebarWrapper from "@/components/side-bar/sidebar-wrapper.";
import { ThemeProvider } from "@/components/theme/theme-provider";
import { Toaster } from "@/components/ui/sonner";
import { auth } from "@/lib/auth";
import { authClient } from "@/lib/authClient";
import { MantineProvider } from "@mantine/core";
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { headers } from "next/headers";
import { ConvexClientProvider } from "./convex";
import "./globals.css";
import QueryProvider from "./QueryProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const sessionInstance = await auth.api.getSession({
    headers: await headers(),
  });

  if (!sessionInstance) {
    await authClient.oneTap();
  }

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <QueryProvider>
          <MantineProvider>
            <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
              <Toaster />
              <ConvexClientProvider>
                {!sessionInstance ? (
                  children
                ) : (
                  <SidebarWrapper
                    session={sessionInstance.session}
                    user={sessionInstance.user}
                  >
                    {children}
                  </SidebarWrapper>
                )}
              </ConvexClientProvider>
            </ThemeProvider>
          </MantineProvider>
        </QueryProvider>
      </body>
    </html>
  );
}
